{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport axios from 'axios';\nimport Updatestyle from \"../style/Updatestyle\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Read = function Read(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    issues = _useState2[0],\n    setIssues = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectedIssue = _useState4[0],\n    setSelectedIssue = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    updatedText = _useState6[0],\n    setUpdatedText = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    refreshKey = _useState8[0],\n    setRefreshKey = _useState8[1];\n  useEffect(function () {\n    fetchIssues();\n  }, [refreshKey]);\n  var fetchIssues = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var response = yield axios.get('https://crudcrud.com/api/24c4607bd64f47aea54d99701af5e0eb/read');\n        if (response.status === 200) {\n          setIssues(response.data);\n        } else {\n          Alert.alert('Error', 'Failed to fetch issues');\n        }\n      } catch (error) {\n        console.error('Error fetching issues:', error);\n        Alert.alert('Error', 'An error occurred');\n      }\n    });\n    return function fetchIssues() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var deleteIssue = function () {\n    var _ref3 = _asyncToGenerator(function* (id) {\n      try {\n        var response = yield axios.delete(`https://crudcrud.com/api/24c4607bd64f47aea54d99701af5e0eb/read/${id}`);\n        if (response.status === 200) {\n          fetchIssues();\n        } else {\n          Alert.alert('Error', 'Failed to delete issue');\n        }\n      } catch (error) {\n        console.error('Error deleting issue:', error);\n        Alert.alert('Error', 'An error occurred while deleting the issue');\n      }\n    });\n    return function deleteIssue(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var updateIssue = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      try {\n        var response = yield axios.put(`https://crudcrud.com/api/24c4607bd64f47aea54d99701af5e0eb/read/${selectedIssue}`, {\n          text: updatedText\n        });\n        if (response.status === 200) {\n          fetchIssues();\n          setSelectedIssue(null);\n          setUpdatedText('');\n        } else {\n          Alert.alert('Error', 'Failed to update issue');\n        }\n      } catch (error) {\n        console.error('Error updating issue:', error);\n        Alert.alert('Error', 'An error occurred while updating the issue');\n      }\n    });\n    return function updateIssue() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var handleUpdatePress = function handleUpdatePress(issueId) {\n    var _issues$find;\n    setSelectedIssue(issueId);\n    var selectedIssueText = (_issues$find = issues.find(function (issue) {\n      return issue._id === issueId;\n    })) == null ? void 0 : _issues$find.text;\n    setUpdatedText(selectedIssueText || '');\n  };\n  var handleCancelUpdate = function handleCancelUpdate() {\n    setSelectedIssue(null);\n    setUpdatedText('');\n  };\n  var handleRefresh = function handleRefresh() {\n    setRefreshKey(function (prevKey) {\n      return prevKey + 1;\n    });\n  };\n  return _jsxs(View, {\n    style: Updatestyle.container,\n    children: [_jsx(Text, {\n      style: Updatestyle.heading,\n      children: \"Issues:\"\n    }), _jsx(FlatList, {\n      data: issues,\n      keyExtractor: function keyExtractor(item) {\n        return item._id;\n      },\n      renderItem: function renderItem(_ref5) {\n        var item = _ref5.item;\n        return _jsxs(View, {\n          style: Updatestyle.issueContainer,\n          children: [_jsx(Text, {\n            style: Updatestyle.issueText,\n            children: item.text\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return handleUpdatePress(item._id);\n            },\n            children: _jsx(Text, {\n              style: Updatestyle.button,\n              children: _jsx(Icon, {\n                name: \"pencil\",\n                size: 15,\n                color: \"black\"\n              })\n            })\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return deleteIssue(item._id);\n            },\n            children: _jsx(Text, {\n              style: Updatestyle.button,\n              children: _jsx(Icon, {\n                name: \"trash-o\",\n                size: 15,\n                color: \"red\"\n              })\n            })\n          })]\n        });\n      }\n    }), _jsx(TouchableOpacity, {\n      style: Updatestyle.refreshButton,\n      onPress: handleRefresh,\n      children: _jsx(Text, {\n        style: Updatestyle.buttonText,\n        children: \"Refresh\"\n      })\n    }), selectedIssue !== null && _jsxs(View, {\n      style: Updatestyle.updateContainer,\n      children: [_jsx(TextInput, {\n        style: Updatestyle.updateInput,\n        placeholder: \"Enter updated text\",\n        value: updatedText,\n        onChangeText: function onChangeText(text) {\n          return setUpdatedText(text);\n        }\n      }), _jsx(TouchableOpacity, {\n        style: Updatestyle.updateButton,\n        onPress: updateIssue,\n        children: _jsx(Text, {\n          style: Updatestyle.buttonText,\n          children: _jsx(Icon, {\n            name: \"pencil\",\n            size: 15,\n            color: \"black\"\n          })\n        })\n      }), _jsx(TouchableOpacity, {\n        style: Updatestyle.updateButton,\n        onPress: handleCancelUpdate,\n        children: _jsx(Text, {\n          style: Updatestyle.buttonText,\n          children: \"Cancel\"\n        })\n      })]\n    })]\n  });\n};\nexport default Read;","map":{"version":3,"names":["React","useEffect","useState","axios","Updatestyle","Icon","Read","navigation","issues","setIssues","selectedIssue","setSelectedIssue","updatedText","setUpdatedText","refreshKey","setRefreshKey","fetchIssues","response","get","status","data","Alert","alert","error","console","deleteIssue","id","delete","updateIssue","put","text","handleUpdatePress","issueId","selectedIssueText","find","issue","_id","handleCancelUpdate","handleRefresh","prevKey","container","heading","item","issueContainer","issueText","button","refreshButton","buttonText","updateContainer","updateInput","updateButton"],"sources":["/home/dom/React-native-IsuesLoger/crud/Read.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, Text, FlatList, TextInput, Alert, TouchableOpacity } from 'react-native';\nimport axios from 'axios';\nimport Updatestyle from '../style/Updatestyle';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nconst Read = ({ navigation }) => {\n  const [issues, setIssues] = useState([]);\n  const [selectedIssue, setSelectedIssue] = useState(null);\n  const [updatedText, setUpdatedText] = useState('');\n  const [refreshKey, setRefreshKey] = useState(0);\n\n  useEffect(() => {\n    fetchIssues();\n  }, [refreshKey]);\n\n  const fetchIssues = async () => {\n    try {\n      const response = await axios.get('https://crudcrud.com/api/24c4607bd64f47aea54d99701af5e0eb/read');\n      if (response.status === 200) {\n        setIssues(response.data);\n      } else {\n        Alert.alert('Error', 'Failed to fetch issues');\n      }\n    } catch (error) {\n      console.error('Error fetching issues:', error);\n      Alert.alert('Error', 'An error occurred');\n    }\n  };\n\n  const deleteIssue = async (id) => {\n    try {\n      const response = await axios.delete(`https://crudcrud.com/api/24c4607bd64f47aea54d99701af5e0eb/read/${id}`);\n      if (response.status === 200) {\n        fetchIssues(); // Refresh the list after deletion\n      } else {\n        Alert.alert('Error', 'Failed to delete issue');\n      }\n    } catch (error) {\n      console.error('Error deleting issue:', error);\n      Alert.alert('Error', 'An error occurred while deleting the issue');\n    }\n  };\n\n  const updateIssue = async () => {\n    try {\n      const response = await axios.put(`https://crudcrud.com/api/24c4607bd64f47aea54d99701af5e0eb/read/${selectedIssue}`, {\n        text: updatedText,\n      });\n      if (response.status === 200) {\n        fetchIssues(); // Refresh the list after update\n        setSelectedIssue(null); // Reset selected issue\n        setUpdatedText(''); // Clear the input field\n      } else {\n        Alert.alert('Error', 'Failed to update issue');\n      }\n    } catch (error) {\n      console.error('Error updating issue:', error);\n      Alert.alert('Error', 'An error occurred while updating the issue');\n    }\n  };\n\n  const handleUpdatePress = (issueId) => {\n    setSelectedIssue(issueId);\n    // Fetch the current text of the selected issue\n    const selectedIssueText = issues.find((issue) => issue._id === issueId)?.text;\n    setUpdatedText(selectedIssueText || '');\n  };\n\n  const handleCancelUpdate = () => {\n    setSelectedIssue(null);\n    setUpdatedText('');\n  };\n\n  const handleRefresh = () => {\n    setRefreshKey((prevKey) => prevKey + 1);\n  };\n\n  return (\n    <View style={Updatestyle.container}>\n      <Text style={Updatestyle.heading}>Issues:</Text>\n      <FlatList\n        data={issues}\n        keyExtractor={(item) => item._id}\n        renderItem={({ item }) => (\n          <View style={Updatestyle.issueContainer}>\n            <Text style={Updatestyle.issueText}>{item.text}</Text>\n            <TouchableOpacity onPress={() => handleUpdatePress(item._id)}>\n              <Text style={Updatestyle.button}><Icon name=\"pencil\" size={15} color=\"black\" /></Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => deleteIssue(item._id)}>\n              <Text style={Updatestyle.button}><Icon name=\"trash-o\" size={15} color=\"red\" /></Text>\n            </TouchableOpacity>\n          </View>\n        )}\n      />\n      <TouchableOpacity style={Updatestyle.refreshButton} onPress={handleRefresh}>\n        <Text style={Updatestyle.buttonText}>Refresh</Text>\n      </TouchableOpacity>\n\n      {selectedIssue !== null && (\n        <View style={Updatestyle.updateContainer}>\n          <TextInput\n            style={Updatestyle.updateInput}\n            placeholder=\"Enter updated text\"\n            value={updatedText}\n            onChangeText={(text) => setUpdatedText(text)}\n          />\n          <TouchableOpacity style={Updatestyle.updateButton} onPress={updateIssue}>\n            <Text style={Updatestyle.buttonText}><Icon name=\"pencil\" size={15} color=\"black\" /></Text>\n          </TouchableOpacity>\n          <TouchableOpacity style={Updatestyle.updateButton} onPress={handleCancelUpdate}>\n            <Text style={Updatestyle.buttonText}>Cancel</Text>\n          </TouchableOpacity>\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport default Read;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from 'axios';\nimport Updatestyle from \"../style/Updatestyle\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Read = function Read(_ref) {\n  var navigation = _ref.navigation,\n    fetchedData = _ref.fetchedData;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedIssue = _useState2[0],\n    setSelectedIssue = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    updatedText = _useState4[0],\n    setUpdatedText = _useState4[1];\n  var deleteIssue = function () {\n    var _ref2 = _asyncToGenerator(function* (id) {\n      try {\n        var response = yield axios.delete(`https://crudcrud.com/api/f856cf192fc645ae8076683d038c8a57/read/${id}`);\n        handleResponse(response, 'Failed to delete issue', fetchIssues);\n      } catch (error) {\n        handleError(error, 'Error deleting issue');\n      }\n    });\n    return function deleteIssue(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var updateIssue = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var response = yield axios.put(`https://crudcrud.com/api/f856cf192fc645ae8076683d038c8a57/read/${selectedIssue}`, {\n          text: updatedText\n        });\n        handleResponse(response, 'Failed to update issue', function () {\n          fetchIssues();\n          setSelectedIssue(null);\n          setUpdatedText('');\n        });\n      } catch (error) {\n        handleError(error, 'Error updating issue');\n      }\n    });\n    return function updateIssue() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleResponse = function handleResponse(response, errorMessage, onSuccess) {\n    if (response.status === 200) {\n      onSuccess();\n    } else {\n      Alert.alert('Error', errorMessage);\n    }\n  };\n  var handleError = function handleError(error, errorMessage) {\n    console.error(errorMessage, error);\n    Alert.alert('Error', 'An error occurred');\n  };\n  var handleUpdatePress = function handleUpdatePress(issueId) {\n    var _fetchedData$find;\n    setSelectedIssue(issueId);\n    var selectedIssueText = (_fetchedData$find = fetchedData.find(function (issue) {\n      return issue._id === issueId;\n    })) == null ? void 0 : _fetchedData$find.text;\n    setUpdatedText(selectedIssueText || '');\n  };\n  var handleCancelUpdate = function handleCancelUpdate() {\n    setSelectedIssue(null);\n    setUpdatedText('');\n  };\n  var fetchIssues = function fetchIssues() {};\n  return _jsxs(View, {\n    style: Updatestyle.container,\n    children: [_jsx(Text, {\n      style: Updatestyle.heading,\n      children: \"Issues:\"\n    }), _jsx(FlatList, {\n      data: fetchedData,\n      keyExtractor: function keyExtractor(item) {\n        return item._id;\n      },\n      renderItem: function renderItem(_ref4) {\n        var item = _ref4.item;\n        return _jsxs(View, {\n          style: Updatestyle.issueContainer,\n          children: [_jsx(Text, {\n            style: Updatestyle.issueText,\n            children: item.text\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return handleUpdatePress(item._id);\n            },\n            children: _jsx(Text, {\n              style: Updatestyle.button,\n              children: _jsx(Icon, {\n                name: \"pencil\",\n                size: 15,\n                color: \"black\"\n              })\n            })\n          }), _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return deleteIssue(item._id);\n            },\n            children: _jsx(Text, {\n              style: Updatestyle.button,\n              children: _jsx(Icon, {\n                name: \"trash-o\",\n                size: 15,\n                color: \"red\"\n              })\n            })\n          })]\n        });\n      }\n    })]\n  });\n};\nexport default Read;","map":{"version":3,"names":["React","useState","axios","Updatestyle","Icon","Read","navigation","fetchedData","selectedIssue","setSelectedIssue","updatedText","setUpdatedText","deleteIssue","id","response","delete","handleResponse","fetchIssues","error","handleError","updateIssue","put","text","errorMessage","onSuccess","status","Alert","alert","console","handleUpdatePress","issueId","selectedIssueText","find","issue","_id","handleCancelUpdate","container","heading","item","issueContainer","issueText","button"],"sources":["/home/dom/React-native-IsuesLoger/crud/Read.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { View, Text, FlatList, TextInput, TouchableOpacity, Alert } from 'react-native';\nimport axios from 'axios';\nimport Updatestyle from '../style/Updatestyle';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\nconst Read = ({ navigation, fetchedData }) => {\n  const [selectedIssue, setSelectedIssue] = useState(null);\n  const [updatedText, setUpdatedText] = useState('');\n\n  const deleteIssue = async (id) => {\n    try {\n      const response = await axios.delete(`https://crudcrud.com/api/f856cf192fc645ae8076683d038c8a57/read/${id}`);\n      handleResponse(response, 'Failed to delete issue', fetchIssues);\n    } catch (error) {\n      handleError(error, 'Error deleting issue');\n    }\n  };\n\n  const updateIssue = async () => {\n    try {\n      const response = await axios.put(`https://crudcrud.com/api/f856cf192fc645ae8076683d038c8a57/read/${selectedIssue}`, {\n        text: updatedText,\n      });\n      handleResponse(response, 'Failed to update issue', () => {\n        fetchIssues();\n        setSelectedIssue(null);\n        setUpdatedText('');\n      });\n    } catch (error) {\n      handleError(error, 'Error updating issue');\n    }\n  };\n\n  const handleResponse = (response, errorMessage, onSuccess) => {\n    if (response.status === 200) {\n      onSuccess();\n    } else {\n      Alert.alert('Error', errorMessage);\n    }\n  };\n\n  const handleError = (error, errorMessage) => {\n    console.error(errorMessage, error);\n    Alert.alert('Error', 'An error occurred');\n  };\n\n  const handleUpdatePress = (issueId) => {\n    setSelectedIssue(issueId);\n    const selectedIssueText = fetchedData.find((issue) => issue._id === issueId)?.text;\n    setUpdatedText(selectedIssueText || '');\n  };\n\n  const handleCancelUpdate = () => {\n    setSelectedIssue(null);\n    setUpdatedText('');\n  };\n\n  const fetchIssues = () => {\n    // Fetching is now handled by the App component, so no need to fetch here\n  };\n\n  return (\n    <View style={Updatestyle.container}>\n      <Text style={Updatestyle.heading}>Issues:</Text>\n      <FlatList\n        data={fetchedData}\n        keyExtractor={(item) => item._id}\n        renderItem={({ item }) => (\n          <View style={Updatestyle.issueContainer}>\n            <Text style={Updatestyle.issueText}>{item.text}</Text>\n            <TouchableOpacity onPress={() => handleUpdatePress(item._id)}>\n              <Text style={Updatestyle.button}><Icon name=\"pencil\" size={15} color=\"black\" /></Text>\n            </TouchableOpacity>\n            <TouchableOpacity onPress={() => deleteIssue(item._id)}>\n              <Text style={Updatestyle.button}><Icon name=\"trash-o\" size={15} color=\"red\" /></Text>\n            </TouchableOpacity>\n          </View>\n        )}\n      />\n    </View>\n  );\n};\n\nexport default Read;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAExC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW;AAClB,OAAOC,IAAI;AAA8C;AAAA;AAEzD,IAAMC,IAAI,GAAG,SAAPA,IAAI,OAAoC;EAAA,IAA9BC,UAAU,QAAVA,UAAU;IAAEC,WAAW,QAAXA,WAAW;EACrC,gBAA0CN,QAAQ,CAAC,IAAI,CAAC;IAAA;IAAjDO,aAAa;IAAEC,gBAAgB;EACtC,iBAAsCR,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA3CS,WAAW;IAAEC,cAAc;EAElC,IAAMC,WAAW;IAAA,8BAAG,WAAOC,EAAE,EAAK;MAChC,IAAI;QACF,IAAMC,QAAQ,SAASZ,KAAK,CAACa,MAAM,CAAE,kEAAiEF,EAAG,EAAC,CAAC;QAC3GG,cAAc,CAACF,QAAQ,EAAE,wBAAwB,EAAEG,WAAW,CAAC;MACjE,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,WAAW,CAACD,KAAK,EAAE,sBAAsB,CAAC;MAC5C;IACF,CAAC;IAAA,gBAPKN,WAAW;MAAA;IAAA;EAAA,GAOhB;EAED,IAAMQ,WAAW;IAAA,8BAAG,aAAY;MAC9B,IAAI;QACF,IAAMN,QAAQ,SAASZ,KAAK,CAACmB,GAAG,CAAE,kEAAiEb,aAAc,EAAC,EAAE;UAClHc,IAAI,EAAEZ;QACR,CAAC,CAAC;QACFM,cAAc,CAACF,QAAQ,EAAE,wBAAwB,EAAE,YAAM;UACvDG,WAAW,EAAE;UACbR,gBAAgB,CAAC,IAAI,CAAC;UACtBE,cAAc,CAAC,EAAE,CAAC;QACpB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,WAAW,CAACD,KAAK,EAAE,sBAAsB,CAAC;MAC5C;IACF,CAAC;IAAA,gBAbKE,WAAW;MAAA;IAAA;EAAA,GAahB;EAED,IAAMJ,cAAc,GAAG,SAAjBA,cAAc,CAAIF,QAAQ,EAAES,YAAY,EAAEC,SAAS,EAAK;IAC5D,IAAIV,QAAQ,CAACW,MAAM,KAAK,GAAG,EAAE;MAC3BD,SAAS,EAAE;IACb,CAAC,MAAM;MACLE,KAAK,CAACC,KAAK,CAAC,OAAO,EAAEJ,YAAY,CAAC;IACpC;EACF,CAAC;EAED,IAAMJ,WAAW,GAAG,SAAdA,WAAW,CAAID,KAAK,EAAEK,YAAY,EAAK;IAC3CK,OAAO,CAACV,KAAK,CAACK,YAAY,EAAEL,KAAK,CAAC;IAClCQ,KAAK,CAACC,KAAK,CAAC,OAAO,EAAE,mBAAmB,CAAC;EAC3C,CAAC;EAED,IAAME,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIC,OAAO,EAAK;IAAA;IACrCrB,gBAAgB,CAACqB,OAAO,CAAC;IACzB,IAAMC,iBAAiB,wBAAGxB,WAAW,CAACyB,IAAI,CAAC,UAACC,KAAK;MAAA,OAAKA,KAAK,CAACC,GAAG,KAAKJ,OAAO;IAAA,EAAC,qBAAlD,kBAAoDR,IAAI;IAClFX,cAAc,CAACoB,iBAAiB,IAAI,EAAE,CAAC;EACzC,CAAC;EAED,IAAMI,kBAAkB,GAAG,SAArBA,kBAAkB,GAAS;IAC/B1B,gBAAgB,CAAC,IAAI,CAAC;IACtBE,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,IAAMM,WAAW,GAAG,SAAdA,WAAW,GAAS,CAE1B,CAAC;EAED,OACE,MAAC,IAAI;IAAC,KAAK,EAAEd,WAAW,CAACiC,SAAU;IAAA,WACjC,KAAC,IAAI;MAAC,KAAK,EAAEjC,WAAW,CAACkC,OAAQ;MAAA,UAAC;IAAO,EAAO,EAChD,KAAC,QAAQ;MACP,IAAI,EAAE9B,WAAY;MAClB,YAAY,EAAE,sBAAC+B,IAAI;QAAA,OAAKA,IAAI,CAACJ,GAAG;MAAA,CAAC;MACjC,UAAU,EAAE;QAAA,IAAGI,IAAI,SAAJA,IAAI;QAAA,OACjB,MAAC,IAAI;UAAC,KAAK,EAAEnC,WAAW,CAACoC,cAAe;UAAA,WACtC,KAAC,IAAI;YAAC,KAAK,EAAEpC,WAAW,CAACqC,SAAU;YAAA,UAAEF,IAAI,CAAChB;UAAI,EAAQ,EACtD,KAAC,gBAAgB;YAAC,OAAO,EAAE;cAAA,OAAMO,iBAAiB,CAACS,IAAI,CAACJ,GAAG,CAAC;YAAA,CAAC;YAAA,UAC3D,KAAC,IAAI;cAAC,KAAK,EAAE/B,WAAW,CAACsC,MAAO;cAAA,UAAC,KAAC,IAAI;gBAAC,IAAI,EAAC,QAAQ;gBAAC,IAAI,EAAE,EAAG;gBAAC,KAAK,EAAC;cAAO;YAAG;UAAO,EACrE,EACnB,KAAC,gBAAgB;YAAC,OAAO,EAAE;cAAA,OAAM7B,WAAW,CAAC0B,IAAI,CAACJ,GAAG,CAAC;YAAA,CAAC;YAAA,UACrD,KAAC,IAAI;cAAC,KAAK,EAAE/B,WAAW,CAACsC,MAAO;cAAA,UAAC,KAAC,IAAI;gBAAC,IAAI,EAAC,SAAS;gBAAC,IAAI,EAAE,EAAG;gBAAC,KAAK,EAAC;cAAK;YAAG;UAAO,EACpE;QAAA,EACd;MAAA;IACP,EACF;EAAA,EACG;AAEX,CAAC;AAED,eAAepC,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}
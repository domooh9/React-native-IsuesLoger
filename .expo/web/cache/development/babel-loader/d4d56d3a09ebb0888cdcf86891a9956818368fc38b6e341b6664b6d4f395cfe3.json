{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Create from \"./crud/Create\";\nimport Read from \"./crud/Read\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    refreshKey = _useState2[0],\n    setRefreshKey = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    fetchedData = _useState4[0],\n    setFetchedData = _useState4[1];\n  var refreshRead = function refreshRead() {\n    console.log('Refreshing Read component or any other logic');\n    setRefreshKey(function (prevKey) {\n      return prevKey + 1;\n    });\n  };\n  useEffect(function () {\n    var fetchData = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var response = yield axios.get('https://crudcrud.com/api/f856cf192fc645ae8076683d038c8a57/read');\n          if (response.status === 200) {\n            setFetchedData(response.data);\n          } else {\n            console.error('Failed to fetch data');\n          }\n        } catch (error) {\n          console.error('Error fetching data:', error.message);\n        }\n      });\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchData();\n  }, [refreshKey]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"IssueLogger\"\n    }), _jsx(Create, {\n      refreshRead: refreshRead\n    }), _jsx(Read, {\n      fetchedData: fetchedData\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F2E3DB',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    color: '#263A29'\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","StatusBar","Create","Read","axios","App","refreshKey","setRefreshKey","fetchedData","setFetchedData","refreshRead","console","log","prevKey","fetchData","response","get","status","data","error","message","styles","container","title","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","fontSize","fontWeight","marginBottom","color"],"sources":["/home/dom/React-native-IsuesLoger/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, View } from 'react-native';\nimport Create from './crud/Create';\nimport Read from './crud/Read';\nimport { Text } from 'react-native-web';\nimport axios from 'axios';\n\nexport default function App() {\n  const [refreshKey, setRefreshKey] = useState(0);\n  const [fetchedData, setFetchedData] = useState([]);\n\n  const refreshRead = () => {\n    console.log('Refreshing Read component or any other logic');\n    setRefreshKey((prevKey) => prevKey + 1);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('https://crudcrud.com/api/f856cf192fc645ae8076683d038c8a57/read');\n        if (response.status === 200) {\n          setFetchedData(response.data);\n        } else {\n          console.error('Failed to fetch data');\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n      }\n    };\n\n    fetchData();\n  }, [refreshKey]);\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>IssueLogger</Text>\n      <Create refreshRead={refreshRead} />\n      <Read fetchedData={fetchedData} />\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F2E3DB',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    color: '#263A29',\n  },\n});"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,iBAAiB;AAAC;AAAA;AAE5C,OAAOC,MAAM;AACb,OAAOC,IAAI;AAAoB;AAE/B,OAAOC,KAAK,MAAM,OAAO;AAAC;AAAA;AAE1B,eAAe,SAASC,GAAG,GAAG;EAC5B,gBAAoCN,QAAQ,CAAC,CAAC,CAAC;IAAA;IAAxCO,UAAU;IAAEC,aAAa;EAChC,iBAAsCR,QAAQ,CAAC,EAAE,CAAC;IAAA;IAA3CS,WAAW;IAAEC,cAAc;EAElC,IAAMC,WAAW,GAAG,SAAdA,WAAW,GAAS;IACxBC,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;IAC3DL,aAAa,CAAC,UAACM,OAAO;MAAA,OAAKA,OAAO,GAAG,CAAC;IAAA,EAAC;EACzC,CAAC;EAEDb,SAAS,CAAC,YAAM;IACd,IAAMc,SAAS;MAAA,6BAAG,aAAY;QAC5B,IAAI;UACF,IAAMC,QAAQ,SAASX,KAAK,CAACY,GAAG,CAAC,gEAAgE,CAAC;UAClG,IAAID,QAAQ,CAACE,MAAM,KAAK,GAAG,EAAE;YAC3BR,cAAc,CAACM,QAAQ,CAACG,IAAI,CAAC;UAC/B,CAAC,MAAM;YACLP,OAAO,CAACQ,KAAK,CAAC,sBAAsB,CAAC;UACvC;QACF,CAAC,CAAC,OAAOA,KAAK,EAAE;UACdR,OAAO,CAACQ,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACC,OAAO,CAAC;QACtD;MACF,CAAC;MAAA,gBAXKN,SAAS;QAAA;MAAA;IAAA,GAWd;IAEDA,SAAS,EAAE;EACb,CAAC,EAAE,CAACR,UAAU,CAAC,CAAC;EAEhB,OACE,MAAC,IAAI;IAAC,KAAK,EAAEe,MAAM,CAACC,SAAU;IAAA,WAC5B,KAAC,IAAI;MAAC,KAAK,EAAED,MAAM,CAACE,KAAM;MAAA,UAAC;IAAW,EAAO,EAC7C,KAAC,MAAM;MAAC,WAAW,EAAEb;IAAY,EAAG,EACpC,KAAC,IAAI;MAAC,WAAW,EAAEF;IAAY,EAAG,EAClC,KAAC,SAAS;MAAC,KAAK,EAAC;IAAM,EAAG;EAAA,EACrB;AAEX;AAEA,IAAMa,MAAM,GAAGG,UAAU,CAACC,MAAM,CAAC;EAC/BH,SAAS,EAAE;IACTI,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB,CAAC;EACDN,KAAK,EAAE;IACLO,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,YAAY,EAAE,EAAE;IAChBC,KAAK,EAAE;EACT;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Update = function Update(_ref) {\n  var navigation = _ref.navigation,\n    route = _ref.route;\n  var _route$params = route.params,\n    issueId = _route$params.issueId,\n    refreshRead = _route$params.refreshRead;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    title = _useState2[0],\n    setTitle = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    issueText = _useState4[0],\n    setIssueText = _useState4[1];\n  useEffect(function () {\n    fetchIssueDetails();\n  }, []);\n  var fetchIssueDetails = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var response = yield axios.get(`https://crudcrud.com/api/24c4607bd64f47aea54d99701af5e0eb/read/${issueId}`);\n        if (response.status === 200) {\n          var issue = response.data;\n          setTitle(issue.title);\n          setIssueText(issue.text);\n        } else {\n          console.error('Failed to fetch issue details. Status:', response.status);\n        }\n      } catch (error) {\n        console.error('Error fetching issue details:', error.message);\n      }\n    });\n    return function fetchIssueDetails() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var updateIssue = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var response = yield axios.put(`https://crudcrud.com/api/9ac036badf0e4c6c9271c7bbd52e3ad1/creating/${issueId}`, {\n          title: title,\n          text: issueText\n        });\n        if (response.status === 200) {\n          refreshRead();\n          if (navigation && navigation.goBack) {\n            navigation.goBack();\n          } else {\n            console.error('Navigation object or goBack method is undefined');\n          }\n        } else {\n          console.error('Failed to update issue. Status:', response.status);\n        }\n      } catch (error) {\n        console.error('Error updating issue:', error.message);\n      }\n    });\n    return function updateIssue() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      children: \"Update Issue:\"\n    }), _jsx(TextInput, {\n      placeholder: \"Enter title\",\n      value: title,\n      onChangeText: function onChangeText(text) {\n        return setTitle(text);\n      }\n    }), _jsx(TextInput, {\n      placeholder: \"Enter issue text\",\n      value: issueText,\n      onChangeText: function onChangeText(text) {\n        return setIssueText(text);\n      }\n    }), _jsx(TouchableOpacity, {\n      onPress: updateIssue,\n      children: _jsx(Text, {\n        children: \"Update Issue\"\n      })\n    })]\n  });\n};\nexport default Update;","map":{"version":3,"names":["React","useState","useEffect","axios","Update","navigation","route","params","issueId","refreshRead","title","setTitle","issueText","setIssueText","fetchIssueDetails","response","get","status","issue","data","text","console","error","message","updateIssue","put","goBack"],"sources":["/home/dom/React-native-IsuesLoger/crud/Update.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\nimport axios from 'axios';\n\nconst Update = ({ navigation, route }) => {\n  const { issueId, refreshRead } = route.params;\n  const [title, setTitle] = useState('');\n  const [issueText, setIssueText] = useState('');\n\n  useEffect(() => {\n    fetchIssueDetails();\n  }, []);\n\n  const fetchIssueDetails = async () => {\n    try {\n      const response = await axios.get(`https://crudcrud.com/api/24c4607bd64f47aea54d99701af5e0eb/read/${issueId}`);\n      if (response.status === 200) {\n        const issue = response.data;\n        setTitle(issue.title);\n        setIssueText(issue.text);\n      } else {\n        console.error('Failed to fetch issue details. Status:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching issue details:', error.message);\n    }\n  };\n\n  const updateIssue = async () => {\n    try {\n      const response = await axios.put(`https://crudcrud.com/api/9ac036badf0e4c6c9271c7bbd52e3ad1/creating/${issueId}`, {\n        title: title,\n        text: issueText,\n      });\n\n      if (response.status === 200) {\n        refreshRead(); // Refresh the 'Read' component after update\n        if (navigation && navigation.goBack) {\n          navigation.goBack();\n        } else {\n          console.error('Navigation object or goBack method is undefined');\n        }\n      } else {\n        console.error('Failed to update issue. Status:', response.status);\n      }\n    } catch (error) {\n      console.error('Error updating issue:', error.message);\n    }\n  };\n\n  return (\n    <View>\n      <Text>Update Issue:</Text>\n      <TextInput\n        placeholder=\"Enter title\"\n        value={title}\n        onChangeText={(text) => setTitle(text)}\n      />\n      <TextInput\n        placeholder=\"Enter issue text\"\n        value={issueText}\n        onChangeText={(text) => setIssueText(text)}\n      />\n      <TouchableOpacity onPress={updateIssue}>\n        <Text>Update Issue</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nexport default Update;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Create from \"./crud/Create\";\nimport Read from \"./crud/Read\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar _useState = useState(0),\n  _useState2 = _slicedToArray(_useState, 2),\n  refreshKey = _useState2[0],\n  setRefreshKey = _useState2[1];\nuseEffect(function () {\n  fetchIssues();\n}, [refreshKey]);\nvar fetchIssues = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var response = yield axios.get('https://crudcrud.com/api/1ec73a99fe1b4ce8847935104fa42b4f/read');\n      if (response.status === 200) {\n        setIssues(response.data);\n      } else {\n        Alert.alert('Error', 'Failed to fetch issues');\n      }\n    } catch (error) {\n      console.error('Error fetching issues:', error);\n      Alert.alert('Error', 'An error occurred');\n    }\n  });\n  return function fetchIssues() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar handleRefresh = function handleRefresh() {\n  setRefreshKey(function (prevKey) {\n    return prevKey + 1;\n  });\n};\nexport default function App() {\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"IssueLogger\"\n    }), _jsx(Create, {\n      refreshRead: refreshRead\n    }), _jsx(Read, {\n      fetchedIssues: fetchIssues\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F2E3DB',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    color: '#263A29'\n  }\n});","map":{"version":3,"names":["StatusBar","React","useEffect","useState","Create","Read","refreshKey","setRefreshKey","fetchIssues","response","axios","get","status","setIssues","data","Alert","alert","error","console","handleRefresh","prevKey","App","styles","container","title","refreshRead","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","fontSize","fontWeight","marginBottom","color"],"sources":["/home/dom/React-native-IsuesLoger/App.js"],"sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Create from './crud/Create';\nimport Read from './crud/Read';\nimport { Text } from 'react-native-web';\n\nconst [refreshKey, setRefreshKey] = useState(0);\n\n  useEffect(() => {\n    fetchIssues();\n  }, [refreshKey]);\n\n  const fetchIssues = async () => {\n    try {\n      const response = await axios.get('https://crudcrud.com/api/1ec73a99fe1b4ce8847935104fa42b4f/read');\n      if (response.status === 200) {\n        setIssues(response.data);\n      } else {\n        Alert.alert('Error', 'Failed to fetch issues');\n      }\n    } catch (error) {\n      console.error('Error fetching issues:', error);\n      Alert.alert('Error', 'An error occurred');\n    }\n  };\n\n  const handleRefresh = () => {\n    setRefreshKey((prevKey) => prevKey + 1);\n  };\n\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>IssueLogger</Text>\n      <Create refreshRead={refreshRead}/>\n      <Read fetchedIssues={fetchIssues}/>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F2E3DB',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 16,\n    color: '#263A29',\n  },\n  \n});"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AAEnD,OAAOC,MAAM;AACb,OAAOC,IAAI;AAAoB;AAAA;AAAA;AAG/B,gBAAoCF,QAAQ,CAAC,CAAC,CAAC;EAAA;EAAxCG,UAAU;EAAEC,aAAa;AAE9BL,SAAS,CAAC,YAAM;EACdM,WAAW,EAAE;AACf,CAAC,EAAE,CAACF,UAAU,CAAC,CAAC;AAEhB,IAAME,WAAW;EAAA,6BAAG,aAAY;IAC9B,IAAI;MACF,IAAMC,QAAQ,SAASC,KAAK,CAACC,GAAG,CAAC,gEAAgE,CAAC;MAClG,IAAIF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;QAC3BC,SAAS,CAACJ,QAAQ,CAACK,IAAI,CAAC;MAC1B,CAAC,MAAM;QACLC,KAAK,CAACC,KAAK,CAAC,OAAO,EAAE,wBAAwB,CAAC;MAChD;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CF,KAAK,CAACC,KAAK,CAAC,OAAO,EAAE,mBAAmB,CAAC;IAC3C;EACF,CAAC;EAAA,gBAZKR,WAAW;IAAA;EAAA;AAAA,GAYhB;AAED,IAAMW,aAAa,GAAG,SAAhBA,aAAa,GAAS;EAC1BZ,aAAa,CAAC,UAACa,OAAO;IAAA,OAAKA,OAAO,GAAG,CAAC;EAAA,EAAC;AACzC,CAAC;AAGH,eAAe,SAASC,GAAG,GAAG;EAC5B,OACE,MAAC,IAAI;IAAC,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAA,WAC5B,KAAC,IAAI;MAAC,KAAK,EAAED,MAAM,CAACE,KAAM;MAAA,UAAC;IAAW,EAAO,EAC7C,KAAC,MAAM;MAAC,WAAW,EAAEC;IAAY,EAAE,EACnC,KAAC,IAAI;MAAC,aAAa,EAAEjB;IAAY,EAAE,EACnC,KAAC,SAAS;MAAC,KAAK,EAAC;IAAM,EAAG;EAAA,EACrB;AAEX;AAAC;AAED,IAAMc,MAAM,GAAGI,UAAU,CAACC,MAAM,CAAC;EAC/BJ,SAAS,EAAE;IACTK,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,SAAS;IAC1BC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE;EAClB,CAAC;EACDP,KAAK,EAAE;IACLQ,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,MAAM;IAClBC,YAAY,EAAE,EAAE;IAChBC,KAAK,EAAE;EACT;AAEF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}